Current Changes to DB:

////////PRE POPULATE

INSERT INTO `djland`.`shows` (`id`, `name`, `host_id`, `weekday`, `start_time`, `end_time`, `pl_req`, `cc_req`, `indy_req`, `fem_req`, `last_show`, `create_date`, `create_name`, `edit_date`, `edit_name`, `active`, `crtc_default`) VALUES ('1', 'Deleted Show', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0');
INSERT INTO `djland`.`playsheets` (`id`, `show_id`, `host_id`, `edit_date`) VALUES ('1', '1', '2', '0');

///// 


///////Alter: Move song data into playitems

ALTER TABLE `playitems` 
ADD COLUMN `artist` VARCHAR(80) NULL AFTER `insert_song_length_second`,
ADD COLUMN `song` VARCHAR(80) NULL AFTER `artist`,
ADD COLUMN `album` VARCHAR(80) NULL AFTER `song`,
ADD COLUMN `composer` VARCHAR(80) NULL AFTER `album`;

UPDATE playitems as p INNER JOIN songs as s ON s.id = p.song_id SET p.artist = s.artist, p.song = s.song, p.album = s.title, p.composer = s.composer;

DROP TABLE songs;

//////////Alter: No foreign key in playsheets pointing to show.There are some playsheets that link to lost shows, make them fill-in, then add foreign key.

UPDATE playsheets SET show_id =1 WHERE show_id = "";
UPDATE playsheets SET show_id=1 WHERE show_id NOT IN (select id from shows);


ALTER TABLE `djland`.`playsheets` 
ADD INDEX `show_id_idx` (`show_id` ASC);
ALTER TABLE `djland`.`playsheets` 
ADD CONSTRAINT `show_id`
  FOREIGN KEY (`show_id`)
  REFERENCES `djland`.`shows` (`id`)
  ON DELETE CASCADE
  ON UPDATE CASCADE;


/////////Alter: Setting up foreign keys in member_show

ALTER TABLE `djland`.`member_show` 
CHANGE COLUMN `member_id` `member_id` INT(11) UNSIGNED NOT NULL ,
CHANGE COLUMN `show_id` `show_id` INT(10) UNSIGNED NOT NULL ;

ALTER TABLE `djland`.`member_show` 
ADD CONSTRAINT `member_link_id`
  FOREIGN KEY (`member_id`)
  REFERENCES `djland`.`membership` (`id`)
  ON DELETE CASCADE
  ON UPDATE CASCADE,
ADD CONSTRAINT `show_link_id`
  FOREIGN KEY (`show_id`)
  REFERENCES `djland`.`shows` (`id`)
  ON DELETE CASCADE
  ON UPDATE CASCADE;

  ALTER TABLE `djland`.`member_show` 
DROP PRIMARY KEY,
ADD PRIMARY KEY (`id`, `show_id`, `member_id`);


///////////Alter: setting up foreign key for playitem -> playlist
UPDATE playitems SET playsheet_id = '1' WHERE !playsheet_id;
UPDATE playitems SET playsheet_id = '1' WHERE playsheet_id not in (SELECT id FROM playsheets);

ALTER TABLE `playitems` 
CHANGE COLUMN `playsheet_id` `playsheet_id` BIGINT(20) UNSIGNED NOT NULL ,
DROP PRIMARY KEY,
ADD PRIMARY KEY (`id`, `playsheet_id`);

ALTER TABLE `playitems` 
ADD CONSTRAINT `playitem_playsheet_id`
  FOREIGN KEY (`playsheet_id`)
  REFERENCES `djland`.`playsheets` (`id`)
  ON DELETE CASCADE
  ON UPDATE CASCADE;

//////////////Alter: setting up foreign key for playitem->song insert fake song 1 which catches all lost playitems
UPDATE playitems SET song_id = 1 WHERE song_id not in (SELECT id FROM songs);
UPDATE playitems SET song_id = 1 WHERE !song_id;


ALTER TABLE `playitems` 
ADD CONSTRAINT `playitem_song_id`
  FOREIGN KEY (`song_id`)
  REFERENCES `songs` (`id`)
  ON DELETE CASCADE
  ON UPDATE CASCADE;

///////////////Alter: Fixing Hosts Table

UPDATE `hosts` SET `name`='Fill In' WHERE `id`='2';
UPDATE `hosts` SET `name`='Fill In' WHERE `id`='4';
INSERT INTO `hosts` (`id`, `name`) VALUES ('2322', 'hostname');
INSERT INTO `hosts` (`id`, `name`) VALUES ('2323', 'hostname');

////////Add: `host` to playsheets

ALTER TABLE playsheets
ADD COLUMN `host` AFTER `end_time`;

Add: `edit_date` to podcast_episodes

ALTER TABLE podcast_episodes 
ADD COLUMN `edit_date` AFTER `duration`;

//////////Alter: Some Columns => NOT NULL to throw DB level error.

ALTER TABLE playsheets 
CHANGE COLUMN `show_id` `show_id` INT(10) UNSIGNED NOT NULL ,
CHANGE COLUMN `host_id` `host_id` INT(10) UNSIGNED NOT NULL ,
CHANGE COLUMN `start_time` `start_time` DATETIME NOT NULL ,
CHANGE COLUMN `end_time` `end_time` TIME NOT NULL,
CHANGE COLUMN `host` `host` VARCHAR(45) NOT NULL AFTER `end_time`,
CHANGE COLUMN `status` `status` TINYINT(4) NOT NULL ,
CHANGE COLUMN `unix_time` `unix_time` INT(11) NOT NULL ,
CHANGE COLUMN `crtc` `crtc` INT(11) NOT NULL DEFAULT '30' ;

///////////Alter: Set podcast channel to be part of primary key, and make it a foreign key.

ALTER TABLE podcast_episodes 
CHANGE COLUMN `channel_id` `channel_id` INT(11) NOT NULL AFTER `id`,
DROP PRIMARY KEY,
ADD PRIMARY KEY (`id`, `channel_id`);

ALTER TABLE podcast_episodes 
ADD CONSTRAINT `channel_id`
  FOREIGN KEY (`channel_id`)
  REFERENCES `djland`.`podcast_channels` (`id`)
  ON DELETE CASCADE
  ON UPDATE CASCADE;


//////////Alter: Convert Shows to INNODB and add foreign key.


ALTER TABLE shows 
CHANGE COLUMN `host_id` `host_id` INT(10) UNSIGNED NOT NULL DEFAULT '0' AFTER `id`,
CHANGE COLUMN `podcast_channel_id` `podcast_channel_id` INT(11) NOT NULL AFTER `host_id`;

ALTER TABLE shows 
DROP PRIMARY KEY,
ADD PRIMARY KEY (`id`, `host_id`, `podcast_channel_id`);

////////Alter: Add foreign key to membership_years

ALTER TABLE `membership_years` 
ADD CONSTRAINT `membership_years_member_id`
  FOREIGN KEY (`member_id`)
  REFERENCES `djland`.`membership` (`id`)
  ON DELETE CASCADE
  ON UPDATE CASCADE;

////////////Alter: Merge Spokenword Subtitle, and Summary HAS TO HAPPEN AFTER CONNECT PLAYLISTS W/ EPISODES SCRIPT

ALTER TABLE `playsheets` 
CHANGE COLUMN `spokenword` `summary` MEDIUMTEXT NULL DEFAULT NULL,
ADD COLUMN `title` TINYTEXT NULL DEFAULT NULL AFTER `edit_date`;

UPDATE podcast_episodes AS p INNER JOIN podcast_episodes AS pe ON p.podcast_episode = pe.id SET pe.summary = concat(pe.subtitle," \n",p.summary," \n",pe.summary);



ALTER TABLE `podcast_episodes` 
CHANGE COLUMN `channel_id` `channel_id` INT(11) NOT NULL AFTER `playsheet_id`,
CHANGE COLUMN `playsheet_id` `playsheet_id` BIGINT(20) UNSIGNED NOT NULL DEFAULT '1' ,
DROP PRIMARY KEY,
ADD PRIMARY KEY (`id`, `channel_id`, `playsheet_id`);

ALTER TABLE `playsheets`
DROP COLUMN `podcast_episode`;


/////////// UPDATE: update end_time on playsheets to be datetime;

ALTER TABLE `playsheets` 
CHANGE COLUMN `end_time` `end_time` DATETIME NULL DEFAULT NULL ;

UPDATE playsheets as p INNER JOIN show_times as s ON p.show_id = s.show_id 
SET p.end_time = 
  CASE
    WHEN ( s.end_day = s.start_day) THEN CONCAT( SUBSTRING(p.start_time,1,10),SUBSTRING(p.end_time,11,19))  
    WHEN ( (s.end_day > s.start_day) OR (s.end_time = '00:00:00')) THEN CONCAT( SUBSTRING( DATE(DATE_ADD(p.start_time,INTERVAL 1 DAY)),1,10) , SUBSTRING(p.end_time,11,19) )
  END;








